// supabase/functions/send-reply/index.ts
import { serve } from "https://deno.land/std@0.177.0/http/server.ts";

serve(async (req) => {
  try {
    if (req.method !== "POST") {
      return new Response("Method not allowed", { status: 405 });
    }

    const { to, subject, message, report_id, status, replied_by } = await req.json();

    if (!to || !subject || !message || !report_id) {
      return new Response("Missing required fields", { status: 400 });
    }

    // --- Enviar correo con Resend ---
    const RESEND_API_KEY = Deno.env.get("RESEND_API_KEY");
    const FROM_EMAIL     = Deno.env.get("FROM_EMAIL"); // ej: "Kronos Zone <soporte@kronoszone.me>"

    if (!RESEND_API_KEY || !FROM_EMAIL) {
      return new Response("Email env vars not set", { status: 500 });
    }

    const html = `
      <div style="font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;line-height:1.6">
        <h2 style="margin:0 0 8px 0">Respuesta de Soporte — Kronos Zone</h2>
        <p>${message.replace(/\n/g, "<br>")}</p>
        <hr style="border:none;border-top:1px solid #eee;margin:20px 0">
        <p style="font-size:13px;color:#666">No respondas a este correo. Si necesitas más ayuda, abre un nuevo reporte.</p>
      </div>
    `;

    const emailResp = await fetch("https://api.resend.com/emails", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${RESEND_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        from: FROM_EMAIL,
        to,
        subject,
        html,
      }),
    });

    if (!emailResp.ok) {
      const t = await emailResp.text();
      return new Response(`Email error: ${t}`, { status: 500 });
    }

    // --- Actualizar el reporte (admin_reply, replied_at, replied_by, status opcional) ---
    const SUPABASE_URL  = Deno.env.get("SUPABASE_URL")!;
    const SERVICE_ROLE  = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!; // clave privada
    const { createClient } = await import("https://esm.sh/@supabase/supabase-js@2");

    const sb = createClient(SUPABASE_URL, SERVICE_ROLE);

    const patch: Record<string, unknown> = {
      admin_reply: message,
      replied_at: new Date().toISOString(),
      replied_by: replied_by || "admin",
    };
    if (status) patch.status = status; // p.ej. "resuelto" o "en_progreso"

    const { error } = await sb.from("reports").update(patch).eq("id", report_id);
    if (error) return new Response(`DB error: ${error.message}`, { status: 500 });

    return new Response(JSON.stringify({ ok: true }), {
      headers: { "Content-Type": "application/json" },
    });
  } catch (err) {
    return new Response(`Error: ${String(err)}`, { status: 500 });
  }
});